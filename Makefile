SPN_DIR_BUILD:= build
  SPN_DIR_BUILD_OUTPUT := $(SPN_DIR_BUILD)/bin
    SPN_OUTPUT := $(SPN_DIR_BUILD_OUTPUT)/spn
    SDL_OUTPUT := $(SPN_DIR_BUILD_OUTPUT)/libSDL3.so
  SPN_DIR_BUILD_SDL := $(SPN_DIR_BUILD)/sdl
SPN_DIR_SOURCE := source
SPN_DIR_EXTERNAL := external
  SPN_DIR_SP := $(SPN_DIR_EXTERNAL)/sp
    SPN_SP_H := $(SPN_DIR_SP)/sp.h
  SPN_DIR_ARGPARSE := $(SPN_DIR_EXTERNAL)/argparse
  SPN_DIR_SDL := $(SPN_DIR_EXTERNAL)/SDL
    SPN_DIR_SDL_INCLUDE := $(SPN_DIR_SDL)/include
SPN_MAKEFILE := Makefile
SPN_COMPILE_DB := compile_commands.json
SPN_CLANGD := .clangd

BUILD_TYPE ?= debug
CMAKE_TYPE := Debug
MAKEFLAGS += -j8
CC := gcc

SPN_FLAG_LANGUAGE := -std=c11
SPN_FLAG_INCLUDES := -I$(SPN_DIR_EXTERNAL) -I$(SPN_DIR_SP) -I$(SPN_DIR_ARGPARSE) -I$(SPN_DIR_SDL)
SPN_FLAG_OUTPUT := -o $(SPN_OUTPUT)
SPN_FLAG_OPTIMIZATION := -g
SPN_FLAG_LIBS := -lSDL3
SPN_CC_FLAGS := $(SPN_FLAG_LANGUAGE) $(SPN_FLAG_INCLUDES) $(SPN_FLAG_OUTPUT) $(SPN_FLAG_OPTIMIZATION) $(SPN_FLAG_LIBS)
SPN_SOURCE_FILES := $(SPN_DIR_SOURCE)/main.c
SPN_CLANGD_HEADER_ONLY_BULLSHIT := -DSP_OS_BACKEND_SDL, -DSP_IMPLEMENTATION

SDL_FLAG_DEFINES := -DCMAKE_BUILD_TYPE=$(CMAKE_TYPE) -DSDL_SHARED=ON -DSDL_STATIC=OFF -DSDL_TEST=OFF -DSDL_EXAMPLES=OFF
SDL_CMAKE_FLAGS := $(SDL_FLAG_DEFINES)

.PHONY: all
all: build

$(SPN_DIR_BUILD_OUTPUT):
	@mkdir -p $(SPN_DIR_BUILD_OUTPUT)

$(SPN_DIR_BUILD_SDL):
	@mkdir -p $(SPN_DIR_BUILD_SDL)

$(SDL_OUTPUT): $(SPN_DIR_BUILD_SDL)
	cmake -S$(SPN_DIR_SDL) -B$(SPN_DIR_BUILD_SDL) $(SDL_CMAKE_FLAGS)
	cmake --build $(SPN_DIR_BUILD_SDL) --parallel
	cp $(SPN_DIR_BUILD_SDL)/libSDL3.so $(SPN_DIR_BUILD_OUTPUT)

$(SPN_OUTPUT): $(SPN_SOURCE_FILES) $(SPN_SP_H) $(SPN_DIR_BUILD_OUTPUT) $(SDL_OUTPUT)
	$(CC) $(SPN_CC_FLAGS) $(SPN_SOURCE_FILES)

$(SPN_COMPILE_DB): $(SPN_MAKEFILE)
	@make clean
	@bear -- make build
	@printf "CompileFlags:\n  Add: [$(SPN_CLANGD_HEADER_ONLY_BULLSHIT)]\n" > $(SPN_CLANGD)

.PHONY: build sdl clangd run clean nuke

build: $(SPN_OUTPUT)

sdl: $(SDL_OUTPUT)

run: build
	./$(SPN_OUTPUT)

clangd: $(SPN_COMPILE_DB) $(SPN_CLANGD)

clean:
	@rm -rf $(SPN_DIR_BUILD_OUTPUT)
	@rm -f $(SPN_COMPILE_DB)
	@rm -f $(SPN_CLANGD)

nuke:
	@rm -rf $(SPN_DIR_BUILD)
	@rm -f $(SPN_COMPILE_DB)
	@rm -f $(SPN_CLANGD)
